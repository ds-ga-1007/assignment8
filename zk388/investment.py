'''
Created on Nov 28, 2016

@author: Zahra Kadkhodaie
'''

class Not_a_Valid_Position(Exception):
    '''A custom exception to be used in the investment class and the main program. It returns an error when invalid numbers are 
    selected for position.'''
    def __str__(self):
        return 'A position must be either of these values: 1, 10, 100, 1000'
    
    
class investment():
    '''Gets an integer as a position and returns an investment object with two attributes: position and value.
    This class take a value as a position or number of shares and returns the value of the shares corresponding to that position. 
    In addition, it has a method that returns an array whose elements are the returns corresponding to each investment.
    Finally, it has another method that sums up all the elements of the above array and returns the total return in one day.'''
    
    def __init__(self, position):
        '''Class attributes are listed below'''
        self.position = position  #number of shares
        
        if position in [1,10,100,1000]:
            self.position_value = 1000/position  #Value of the investment share
        else:
            raise Not_a_Valid_Position()
        
        self.cumu_ret = self.daily_outcome() 
    
    def daily_outcome(self):
        '''Returns an array that contains all the investment outcomes in one day'''
        from numpy.random import uniform
        from numpy import zeros
        
        cumu_ret = zeros((self.position,1))
        for trial in range(self.position):
            if uniform(low=0.0, high=1.0, size=1) < .490:  #Random numbers are generated by a uniform random variable, so 49% of the times they are smaller than .490
                cumu_ret[trial] = 0 
            else: 
                cumu_ret[trial] = self.position_value*2
        self.cumu_ret = cumu_ret
        return self.cumu_ret
    
    def daily_gain(self):
        '''Returns the sum of all gains in one day'''
        from numpy import sum
        return (sum(self.cumu_ret)/1000) -1 